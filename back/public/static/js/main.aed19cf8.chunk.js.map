{"version":3,"sources":["components/PickImage.js","utils/StringLiterals.js","components/ImagePicked/ConfirmPic.js","components/ImagePicked/Cropper.js","components/ImagePicked/ImagePicked.js","actions/uploadPic.js","components/UploadedImages.js","App.js","serviceWorker.js","index.js"],"names":["PickImage","inputChanged","e","pickedImage","currentTarget","files","reader","FileReader","onload","props","onSelect","target","result","readAsDataURL","checkImage","url","length","className","elevation","Elevation","TWO","text","onInputChange","this","Component","sl","errorImg","invalidImg","ConfirmPic","state","loadedPic","img","naturalWidth","naturalHeight","setState","validImage","error","icon","iconSize","Icon","SIZE_LARGE","onClick","goBack","onLoad","src","filePath","alt","toCropMode","Cropper","modes","horizontal","height","width","vertical","horizontalSmall","gallery","types","onType","crop","unit","picked","updateCrop","cropComplete","bind","cropClicked","prevState","x","y","backClicked","imageRef","getCroppedImg","then","croppedImageUrl","image","fileName","canvas","document","createElement","scaleX","scaleY","getContext","drawImage","Promise","resolve","reject","toBlob","blob","name","window","URL","revokeObjectURL","fileUrl","createObjectURL","console","onChange","onComplete","onImageLoaded","locked","Content","cropMode","imgData","imgDims","formData","FormData","append","JSON","stringify","axios","post","catch","response","status","data","links","UploadedImages","map","href","App","fileSelected","loading","getContent","size","Spinner","uploadComplete","filesUploaded","uploadPic","FOUR","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.aed19cf8.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { FileInput, Card, Elevation } from '@blueprintjs/core';\r\nimport './PickImage.css';\r\n\r\nexport default class PickImage extends Component {\r\n\r\n  inputChanged = (e) => {\r\n    let pickedImage = e.currentTarget.files;\r\n    if (pickedImage && pickedImage[0]) {\r\n      let reader = new FileReader();\r\n      reader.onload = (e) => this.props.onSelect(pickedImage[0], e.target.result);\r\n      reader.readAsDataURL(pickedImage[0]);\r\n    }\r\n  }\r\n\r\n  checkImage = (url) => {\r\n    if (url.length === 0)\r\n      return false;\r\n    return true;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Card className='pickImage' elevation={Elevation.TWO}>\r\n        <h3>Pick an image of dimensions 1024 x 1024 : </h3>\r\n        <div className='pickFileInput'>\r\n          <FileInput text=\"Choose image...\" onInputChange={this.inputChanged} />\r\n        </div>\r\n      </Card>\r\n    )\r\n  }\r\n}\r\n","export let sl = {\r\n  errorImg : 'Error loading image',\r\n  invalidImg: 'Image doesn\\'t have 1024 x 1024 dimension'\r\n}","import React, { Component } from 'react'\r\nimport { Card, Button, Icon } from '@blueprintjs/core'\r\nimport './ConfirmPic.css'\r\nimport { sl } from '../../utils/StringLiterals';\r\n\r\nexport default class ConfirmPic extends Component {\r\n\r\n  state = {};\r\n\r\n  loadedPic = ({ target: img }) => {\r\n    if (img.naturalWidth === 1024 && img.naturalHeight === 1024) {\r\n      this.setState({ validImage: true });\r\n    } else {\r\n      this.setState({ error: sl.invalidImg });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Card className='pic_container'>\r\n        <div className='backBtn'>\r\n          <Button className='bp3-minimal' icon={<Icon icon='arrow-left' iconSize={Icon.SIZE_LARGE} />} onClick={this.props.goBack} />\r\n        </div>\r\n\r\n        <img className='lepic' onLoad={this.loadedPic} src={this.props.filePath} alt='' />\r\n\r\n        <div className='confirmErrorMsg'>\r\n          {this.state.validImage &&\r\n            <Button text='Crop' onClick={this.props.toCropMode} className='bp3-fill bp3-intent-primary' />}\r\n          {this.state.error &&\r\n            <h4>{this.state.error}</h4>}\r\n        </div>\r\n\r\n      </Card>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport ReactCrop from 'react-image-crop';\r\nimport { Button } from '@blueprintjs/core';\r\nimport \"react-image-crop/dist/ReactCrop.css\";\r\nimport './Cropper.css';\r\n\r\nexport default class Cropper extends Component {\r\n\r\n  modes = {\r\n    horizontal: { height: 755, width: 450 },\r\n    vertical: { height: 365, width: 450 },\r\n    horizontalSmall: { height: 365, width: 212 },\r\n    gallery: { height: 380, width: 380 }\r\n  }\r\n\r\n  types = ['horizontal', 'vertical', 'horizontalSmall', 'gallery']\r\n\r\n  state = {\r\n    onType: 0,\r\n    crop: { unit: 'px' },\r\n    picked: {}\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.updateCrop();\r\n  }\r\n\r\n  updateCrop = () => {\r\n    let { crop } = this.state;\r\n    crop.height = this.modes[this.types[this.state.onType]].height;\r\n    crop.width = this.modes[this.types[this.state.onType]].width;\r\n    this.setState({ crop }, this.cropComplete.bind(this, this.state.crop));\r\n  }\r\n\r\n  cropClicked = () => {\r\n    this.setState((prevState)=>{\r\n    let { picked, onType } = prevState;\r\n    picked[this.types[onType]] = { x: prevState.crop.x, y: prevState.crop.y };\r\n    if (onType === 3) {\r\n      this.props.cropComplete(picked);\r\n      return prevState;\r\n    }\r\n    return { picked, onType: onType + 1 };\r\n    }, this.updateCrop);\r\n  }\r\n\r\n  backClicked = () => {\r\n    this.setState((prevState)=>{\r\n      return {onType: prevState.onType - 1}\r\n    }, this.updateCrop);\r\n  }\r\n\r\n  cropComplete = crop => {\r\n    if (this.imageRef && crop.width && crop.height) {\r\n      this.getCroppedImg(this.imageRef, crop, 'ok.jpeg').then(croppedImageUrl => this.setState({ croppedImageUrl }));\r\n    }\r\n  }\r\n\r\n  getCroppedImg(image, crop, fileName) {\r\n    const canvas = document.createElement(\"canvas\");\r\n    const scaleX = image.naturalWidth / image.width;\r\n    const scaleY = image.naturalHeight / image.height;\r\n    canvas.width = crop.width;\r\n    canvas.height = crop.height;\r\n    const ctx = canvas.getContext(\"2d\");\r\n\r\n    ctx.drawImage(\r\n      image,\r\n      crop.x * scaleX,\r\n      crop.y * scaleY,\r\n      crop.width * scaleX,\r\n      crop.height * scaleY,\r\n      0,\r\n      0,\r\n      crop.width,\r\n      crop.height\r\n    );\r\n\r\n    return new Promise((resolve, reject) => {\r\n      canvas.toBlob(blob => {\r\n        if (!blob) {\r\n          //reject(new Error('Canvas is empty'));\r\n          console.error(\"Canvas is empty\");\r\n          return;\r\n        }\r\n        blob.name = fileName;\r\n        window.URL.revokeObjectURL(this.fileUrl);\r\n        this.fileUrl = window.URL.createObjectURL(blob);\r\n        resolve(this.fileUrl);\r\n      }, \"image/jpeg\");\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='cropperDiv'>\r\n        <ReactCrop src={this.props.filePath} onChange={crop => this.setState({ crop })}\r\n          onComplete={this.cropComplete} onImageLoaded={image => this.imageRef = image}\r\n          crop={this.state.crop} locked={true} />\r\n        <div className='previewDiv'>\r\n          {this.state.croppedImageUrl &&\r\n            <div className='cropImg'>\r\n              <img src={this.state.croppedImageUrl} />\r\n            </div>}\r\n          <Button text='Crop' onClick={this.cropClicked} />\r\n          <Button text='Back' onClick={this.backClicked} />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport ConfirmPic from './ConfirmPic'\r\nimport Cropper from './Cropper';\r\n\r\nexport default class Content extends Component {\r\n\r\n  state = {\r\n    cropMode: false\r\n  }\r\n\r\n  toCropMode = ()=> {\r\n    this.setState({cropMode: true});\r\n  }\r\n\r\n  render() {\r\n    if(!this.state.cropMode) return <ConfirmPic goBack={this.props.goBack} filePath={this.props.filePath} toCropMode={this.toCropMode}/>\r\n    return (\r\n      <Cropper filePath={this.props.filePath} cropComplete={this.props.cropComplete}/>\r\n    );\r\n  }\r\n}\r\n","import axios from \"axios\";\r\n\r\nexport default (imgData, imgDims) => {\r\n  const formData = new FormData();\r\n  formData.append('image', imgData);\r\n  formData.append('dims', JSON.stringify(imgDims));\r\n  return axios.post(\"https://localhost:3004/imageData\", formData)\r\n    .catch((error) => {\r\n      throw error;\r\n    })\r\n    .then((response) => {\r\n      if (response.status === 200)\r\n        return response.data.links;\r\n    });\r\n}","import React, { Component } from 'react'\r\nimport './UploadedImages.css';\r\n\r\nexport default class UploadedImages extends Component {\r\n  render() {\r\n    return (\r\n      <div className='imageGrid'>\r\n        {this.props.data.map((e) => {\r\n          return (\r\n            <a href={e} target='_blank'>\r\n              <img src={e} alt='' />\r\n            </a>);\r\n        })}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\nimport '@blueprintjs/core/lib/css/blueprint.css';\nimport '@blueprintjs/icons/lib/css/blueprint-icons.css';\nimport PickImage from './components/PickImage';\nimport { Card, Elevation, Spinner } from \"@blueprintjs/core\";\nimport './App.css';\nimport ImagePicked from './components/ImagePicked/ImagePicked';\nimport uploadPic from './actions/uploadPic';\nimport UploadedImages from './components/UploadedImages';\n\nexport default class App extends Component {\n\n  state = {\n    fileSelected: false,\n    loading: false\n  }\n\n  getContent = () => {\n    if(this.state.loading){\n      return <Spinner size={Spinner.SIZE_LARGE}/>\n    }\n    if(this.state.uploadComplete){\n      return <UploadedImages data={this.state.filesUploaded}/>\n    }\n    if (!this.state.fileSelected) {\n      return <PickImage onSelect={this.onSelect} />;\n    }\n    if(!this.state.cropComplete){\n      return <ImagePicked goBack={this.goBack} filePath={this.state.filePath} cropComplete={this.cropComplete}/>\n    }\n\n  }\n\n  goBack = () => {\n    this.setState({fileSelected: false});\n  }\n\n  onSelect = (data, filePath) => {\n    this.setState({\n      fileSelected: true,\n      filePath,\n      data\n    });\n  }\n\n  cropComplete = (imgDims)=> {\n    this.setState({cropComplete: true, loading: true});\n    uploadPic(this.state.data, imgDims)\n    .then((data)=>{\n      this.setState({\n        filesUploaded : data,\n        loading:false, \n        uploadComplete: true, \n        cropComplete: false, \n        fileSelected: false\n      });\n    })\n    .catch(()=>{\n      //show error dialog\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Card className=\"header\" elevation={Elevation.FOUR}>\n          Image Cropper\n        </Card>\n        <div className=\"content\">\n          {this.getContent()}\n        </div>\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}